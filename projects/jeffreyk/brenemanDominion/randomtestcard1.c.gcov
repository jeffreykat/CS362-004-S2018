        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <time.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "assert.h"
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include "rngs.h"
        -:    9:
      220:   10:int smithyTest(){
      220:   11:   int result, expected = 3, s = 99;
      220:   12:   int numPlayers = (rand() % 2) + 1;
        -:   13:   struct gameState testgame;
      220:   14:   int k[10] = {adventurer, feast, mine, village, baron, gardens, embargo, tribute, minion, council_room};
      220:   15:   memset(&testgame, '\0', sizeof(struct gameState));
      220:   16:   initializeGame(numPlayers, k, s, &testgame);
        -:   17:
      220:   18:   int player1 = (rand() % 2) + 1;
      220:   19:   int pos = (rand() % 9) + 1;
      220:   20:   cardEffect(smithy, 0, 0, 0, &testgame, pos, 0);
      220:   21:   result = testgame.handCount[player1];
      220:   22:   if(result == expected)
    #####:   23:      return 0;
      220:   24:   return 1;
        -:   25:}
        -:   26:
        1:   27:int main () {
        1:   28:   srand(time(NULL));
        1:   29:   int test = 0;
        -:   30:   int i;
      221:   31:   for(i = 0; i < 220; i++){
      220:   32:      test += smithyTest();
        -:   33:   }
        1:   34:   printf("FAILS: %d\n", test);
        1:   35:   return 0; 
        -:   36:}
        -:   37:
