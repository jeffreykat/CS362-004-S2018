        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <time.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "assert.h"
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include "rngs.h"
        -:    9:
    #####:   10:int mineTest(){
    #####:   11:   int result, expected = 3, s = 99;
    #####:   12:   int numPlayers = (rand() % 2);
        -:   13:   struct gameState testgame;
    #####:   14:   int k[10] = {adventurer, feast, mine, village, baron, gardens, embargo, tribute, minion, council_room};
    #####:   15:   memset(&testgame, 23, sizeof(struct gameState));
    #####:   16:   initializeGame(numPlayers, k, s, &testgame);
        -:   17:
    #####:   18:   int player1 = (rand() % 2);
    #####:   19:   int pos = rand() % (testgame.handCount[player1]);
    #####:   20:   cardEffect(mine, 1, 1, 1, &testgame, pos, 0);
    #####:   21:   result = testgame.handCount[player1];
        -:   22:
    #####:   23:   if(result == expected)
    #####:   24:      return 0;
    #####:   25:   return 1;
        -:   26:}
        -:   27:
        1:   28:int main () {
        1:   29:   srand(time(NULL));
        1:   30:   int test = 0;
        -:   31:   int i;
        1:   32:   for(i = 0; i < 250; i++){
        -:   33:      //test += mineTest();
        -:   34:   }
        1:   35:   printf("FAILS: %d\n", test);
        1:   36:   return 0; 
        -:   37:}
        -:   38:
